var ControllerHelper = (function () {
    function ControllerHelper() {
    }
    ControllerHelper.allowController = function (child, controller) {
        var element = child;
        while (element.nodeName.toLowerCase() !== 'html') {
            if (element.getAttribute('data-controller') === controller)
                return true;
            element = element.parentNode;
        }
        return false;
    };
    return ControllerHelper;
}());
var ObjectHelper = (function () {
    function ObjectHelper() {
    }
    ObjectHelper.show = function (obj) {
        obj.classList.add('is-show');
        obj.classList.remove('is-hide');
        obj.setAttribute('aria-hidden', 'false');
        obj.setAttribute('aria-expanded', 'true');
    };
    ObjectHelper.hide = function (obj) {
        obj.classList.add('is-hide');
        obj.classList.remove('is-show');
        obj.setAttribute('aria-hidden', 'true');
        obj.setAttribute('aria-expanded', 'false');
    };
    return ObjectHelper;
}());
var Nav = (function () {
    function Nav() {
    }
    Nav.prototype.toggle = function (obj) {
        var target = obj.parentNode.getElementsByTagName('ul')[0] || obj.parentNode.getElementsByTagName('menu')[0];
        if (this._isHide(target) && this._hasController(obj))
            this._show(target);
        else
            this._hide(target);
    };
    Nav.prototype._show = function (obj) {
        ObjectHelper.show(obj);
    };
    Nav.prototype._hide = function (obj) {
        ObjectHelper.hide(obj);
    };
    Nav.prototype._isHide = function (obj) {
        return obj.classList.contains('is-hide');
    };
    Nav.prototype._hasController = function (obj) {
        return ControllerHelper.allowController(obj, 'NavController');
    };
    return Nav;
}());
var NavController = (function () {
    function NavController() {
        this._nav = new Nav();
    }
    NavController.prototype.dropdown = function (link, event) {
        event.preventDefault();
        this._nav.toggle(link);
    };
    return NavController;
}());
var Tab = (function () {
    function Tab() {
    }
    Tab.prototype.toggle = function (obj) {
        if (!obj.classList.contains('is-active')) {
            this._isActiveTab(obj);
            this._showBody(obj);
        }
    };
    Tab.prototype._isActiveTab = function (obj) {
        this._isInactiveTab(obj.parentNode.parentNode.querySelector('.is-active'));
        obj.setAttribute('aria-selected', 'true');
        obj.classList.add('is-active');
    };
    Tab.prototype._isInactiveTab = function (obj) {
        obj.setAttribute('aria-selected', 'false');
        obj.classList.remove('is-active');
    };
    Tab.prototype._showBody = function (obj) {
        var body = this._findBody(obj);
        this._hideBody(body.parentNode.querySelector('.is-show'));
        ObjectHelper.show(body);
    };
    Tab.prototype._hideBody = function (obj) {
        ObjectHelper.hide(obj);
    };
    Tab.prototype._findBody = function (obj) {
        return obj.parentNode.parentNode.parentNode.querySelector(obj.getAttribute('href'));
    };
    return Tab;
}());
var TabController = (function () {
    function TabController() {
        this._tab = new Tab();
    }
    TabController.prototype.toggle = function (tab, event) {
        event.preventDefault();
        this._tab.toggle(tab);
    };
    return TabController;
}());
var ModalBackground = (function () {
    function ModalBackground(id) {
        this._id = id;
    }
    ModalBackground.prototype.create = function () {
        var modalBackground = document.createElement('DIV');
        modalBackground.classList.add('o-modal__background');
        modalBackground.setAttribute('data-modal', this._id);
        modalBackground.setAttribute('onclick', "ModalController.hide('" + this._id + "')");
        return modalBackground;
    };
    ModalBackground.prototype.remove = function (id) {
        var modalBackground;
        if (this._isFrame())
            modalBackground = parent.document.querySelector("[data-modal=" + id + "]");
        else
            modalBackground = document.querySelector("[data-modal=" + id + "]");
        if (modalBackground != null && modalBackground != undefined)
            modalBackground.parentNode.removeChild(modalBackground);
    };
    ModalBackground.prototype._isFrame = function () {
        return parent.document.location != self.location;
    };
    return ModalBackground;
}());
var ModalContent = (function () {
    function ModalContent() {
    }
    ModalContent.prototype.create = function () {
        var content = document.createElement('DIV');
        content.classList.add('o-modal__content');
        return content;
    };
    return ModalContent;
}());
var Modal = (function () {
    function Modal() {
        this._modalBackground = new ModalBackground();
    }
    Modal.prototype.append = function () {
        var modal = this.create();
        modal.appendChild(new ModalContent().create());
        document.body.appendChild(modal);
    };
    Modal.prototype.hide = function (id) {
        var modal;
        this._removeBackground(id);
        if (this._isFrame())
            modal = parent.document.getElementById(id);
        else
            modal = document.getElementById(id);
        ObjectHelper.hide(modal);
    };
    Modal.prototype.show = function (id) {
        this._insertBackground(id);
        var modal = document.getElementById(id);
        ObjectHelper.show(modal);
    };
    Modal.prototype.create = function () {
        var modal = document.createElement('DIALOG');
        modal.classList.add('o-modal', 'o-modal--large', 'is-hide');
        modal.id = 'o-modal--1';
        modal.setAttribute('aria-hidden', 'true');
        modal.setAttribute('aria-expanded', 'false');
        modal.setAttribute('aria-labelledby', 'o-modal__title--1');
        modal.setAttribute('role', 'dialog');
        return modal;
    };
    Modal.prototype._insertBackground = function (id) {
        document.body.appendChild(new ModalBackground(id).create());
    };
    Modal.prototype._removeBackground = function (id) {
        this._modalBackground.remove(id);
    };
    Modal.prototype._isFrame = function () {
        return parent.document.location != self.location;
    };
    return Modal;
}());
var ModalController = (function () {
    function ModalController() {
        this._modal = new Modal();
    }
    ModalController.prototype.hide = function (id) {
        this._modal.hide(id);
        return this;
    };
    ModalController.prototype.show = function (id) {
        this._idModal = id;
        this._modal.show(id);
        return this;
    };
    return ModalController;
}());
var Steps = (function () {
    function Steps() {
    }
    Steps.prototype.step = function (target, current) {
        ObjectHelper.show(this._findStep(target));
        ObjectHelper.hide(this._findStep(current));
    };
    Steps.prototype._findStep = function (s) {
        return document.getElementsByClassName(s)[0];
    };
    return Steps;
}());
var StepsController = (function () {
    function StepsController() {
        this._steps = new Steps();
    }
    StepsController.prototype.step = function (step) {
        this._steps.step(step.dataset.target, step.dataset.current);
    };
    return StepsController;
}());
(function (classes) {
    classes.ModalController = ModalController;
    classes.NavController = NavController;
    classes.TabController = TabController;
    classes.StepsController = StepsController;
})(window.classes || (window.classes = {}));
var StringHelper = (function () {
    function StringHelper() {
    }
    StringHelper.trimAll = function (string) {
        return string.replace(/\s/g, "");
    };
    StringHelper.trimLeft = function (string) {
        return string.replace(/^\s+/, "");
    };
    StringHelper.trimLeftRight = function (string) {
        return string.replace(/^\s+|\s+$/g, "");
    };
    StringHelper.trimRight = function (string) {
        return string.replace(/\s+$/, "");
    };
    return StringHelper;
}());
(function (document, window) {
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('[data-controller]').forEach(function (element) {
            var controller = StringHelper.trimAll(element.dataset.controller);
            var clazzes = controller.split(',');
            clazzes.forEach(function (clazz) {
                window[clazz] = new window.classes[clazz]();
            });
        });
    });
})(document, window);
var ModalFrame = (function () {
    function ModalFrame(url) {
        this._url = url;
    }
    ModalFrame.prototype.create = function () {
        var iframe = document.createElement('IFRAME');
        iframe.src = this._url;
        return iframe;
    };
    return ModalFrame;
}());
